import json
import logging
import os
import aiofiles
import httpx
from bot.database.methods.update import server_space_update

class WireGuard:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –Ω–∞ WireGuard VPN —Å–µ—Ä–≤–µ—Ä–∞—Ö.
    """
    NAME_VPN = 'WireGuard'
    servers = json.loads(os.getenv("WG_SERVERS", """{
        "1": {"name": "WireGuard | –ê–º—Å—Ç–µ—Ä–¥–∞–ºüá≥üá±", "url": "http://77.238.241.8:8080"},
        "2": {"name": "WireGuard | –ê–º—Å—Ç–µ—Ä–¥–∞–º2üá≥üá±", "url": "http://194.246.83.231:8080"},
        "3": {"name": "WireGuard | –ê–º—Å—Ç–µ—Ä–¥–∞–º3üá≥üá±", "url": "http://89.110.87.122:8080"},
        "4": {"name": "WireGuard | –ê–º—Å—Ç–µ—Ä–¥–∞–º4üá≥üá±", "url": "http://77.238.234.122:8080"}
    }"""))

    def __init__(self, chat_id, server="all"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ WireGuard.

        :param chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param server: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ "all" –¥–ª—è –≤—Å–µ—Ö.
        """
        self.chat_id = chat_id
        self.s_id = server
        self.server = self.servers.get(server) if server != "all" else "all"

    async def add_user(self) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä WireGuard.
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º.

        :return: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É WireGuard.
        """
        try:
            async with httpx.AsyncClient() as client:
                # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                if self.server != "all":
                    for s_id, server_info in self.servers.items():
                        if s_id != self.s_id:
                            await self._delete_user_from_server(client, server_info['url'],s_id)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
                file_path = await self._create_user_on_server(client)
                return file_path
        except Exception as e:
            logging.error(f"Error in add_user: {e}")
            raise

    async def delete_user(self):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤.
        """
        try:
            async with httpx.AsyncClient() as client:
                if self.server == "all":
                    for s_id,server_info in self.servers.items():
                        await self._delete_user_from_server(client, server_info['url'],s_id)
                else:
                    await self._delete_user_from_server(client, self.server['url'],int(self.s_id))
        except Exception as e:
            logging.error(f"Error in delete_user: {e}")
            raise

    async def _create_user_on_server(self, client: httpx.AsyncClient) -> str:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.

        :param client: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç httpx.
        :return: –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É WireGuard.
        """
        url = self.server['url'] + "/createWG"
        data = {"chat_id": self.chat_id}
        response = await client.post(url, json=data)
        response.raise_for_status()

        response_data = response.json()
        file_path = f'/app/bot/WG/files/PorozoffVPN-{self.s_id}-{self.chat_id}.conf'

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        async with aiofiles.open(file_path, 'wb') as f:
            async with client.stream("GET", response_data['url']) as stream:
                async for chunk in stream.aiter_bytes():
                    await f.write(chunk)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        await server_space_update(f"WG_{self.s_id}", response_data['space'])
        return file_path

    async def _delete_user_from_server(self, client: httpx.AsyncClient, server_url: str,server_id: int):
        """
        –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–µ—Ä–≤–µ—Ä–∞.

        :param client: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç httpx.
        :param server_url: URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            url = server_url + "/deleteWG"
            data = {"chat_id": self.chat_id}
            response = await client.post(url, json=data)
            response.raise_for_status()
            response_data = response.json()
            await server_space_update(f"WG_{server_id}", response_data['space'])
            logging.info(f"User {self.chat_id} removed from server {server_url}")
        except httpx.RequestError as e:
            logging.error(f"Failed to remove user from {server_url}: {e}")
